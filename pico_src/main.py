from includes.example_lib_01 import *

flash(4)

"""
┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ Raspberry Pi Pico SSD1306 OLED Display (MicroPython)     ┃
┃                                                          ┃
┃ A program to display Raspberry Pi logo, text, and a      ┃
┃ simple timer animation on an SSD1306 OLED display        ┃
┃ connected to a Raspberry Pi Pico.                        ┃
┃                                                          ┃
┃ Copyright (c) 2023 Anderson Costa                        ┃
┃ GitHub: github.com/arcostasi                             ┃
┃ License: MIT                                             ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
"""

from machine import Pin, I2C
from includes.ssd1306 import SSD1306_I2C
import framebuf, sys
import utime

pix_res_x = 128
pix_res_y = 64

def init_i2c(scl_pin, sda_pin):
    # Initialize I2C device
    i2c_dev = I2C(1, scl=Pin(scl_pin), sda=Pin(sda_pin), freq=200000)
    i2c_addr = [hex(ii) for ii in i2c_dev.scan()]
    
    if not i2c_addr:
        print('No I2C Display Found')
        sys.exit()
    else:
        print("I2C Address      : {}".format(i2c_addr[0]))
        print("I2C Configuration: {}".format(i2c_dev))
    
    return i2c_dev

def display_logo(oled):
    # Display the Raspberry Pi logo on the OLED
    # buffer = bytearray(b"\x11\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01|?\x00\x01\x86@\x80\x01\x01\x80\x80\x01\x11\x88\x80\x01\x05\xa0\x80\x00\x83\xc1\x00\x00C\xe3\x00\x00~\xfc\x00\x00L'\x00\x00\x9c\x11\x00\x00\xbf\xfd\x00\x00\xe1\x87\x00\x01\xc1\x83\x80\x02A\x82@\x02A\x82@\x02\xc1\xc2@\x02\xf6>\xc0\x01\xfc=\x80\x01\x18\x18\x80\x01\x88\x10\x80\x00\x8c!\x00\x00\x87\xf1\x00\x00\x7f\xf6\x00\x008\x1c\x00\x00\x0c \x00\x00\x03\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")
    
    buffer = bytearray([# 'Bold_pixel_CHN', 64x64px
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0xc0, 0x1e, 0x01, 0x01, 0x06, 0x58, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 
0x1f, 0x00, 0x00, 0x00, 0xc0, 0x84, 0x99, 0x40, 0x00, 0x00, 0x00, 0xc0, 0x80, 0x80, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0xfe, 0xfe, 0xfc, 0x9c, 0x9f, 0x9f, 0x9f, 0x9f, 0x9c, 0x9e, 0xde, 0xfc, 0xfe, 0xfe, 0x00, 0xff, 
0x00, 0x62, 0xee, 0x7e, 0xff, 0xff, 0xff, 0xfe, 0xee, 0xe6, 0x7e, 0xff, 0xff, 0xff, 0x7e, 0xee, 
0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0xff, 0xff, 0xff, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xf7, 0xff, 0xff, 0xff, 0x92, 0x00, 
0x00, 0x4c, 0xdc, 0xde, 0xce, 0xcf, 0xff, 0xff, 0xf7, 0x77, 0x77, 0x3f, 0x3f, 0x1f, 0x0e, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x79, 0xf9, 0xf9, 0xfc, 0x38, 0x38, 0x3c, 0x38, 0x38, 0x3c, 0xf8, 0xf9, 0xf9, 0xf9, 0x04, 0x82, 
0x00, 0x38, 0xb8, 0xf9, 0xf9, 0xf9, 0x38, 0xbb, 0x38, 0x38, 0xf8, 0xf8, 0xfc, 0x38, 0x38, 0x38, 
0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0xef, 0xff, 0xff, 0xff, 0x1e, 0x9e, 0x9e, 0x1e, 0x1e, 0x9e, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 
0x00, 0x06, 0xdf, 0xff, 0xff, 0xff, 0xee, 0xf9, 0x7c, 0x3f, 0xff, 0xff, 0xff, 0x3e, 0x7e, 0x78, 
0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x05, 0x0f, 0x0f, 0x07, 0x07, 0x03, 0x07, 0x07, 0x03, 0x07, 0x07, 0x0f, 0x0f, 0x07, 0x00, 0x06, 
0xf8, 0x03, 0x07, 0x03, 0x03, 0x83, 0xb7, 0x01, 0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x01, 0x5e, 0x40, 0x80, 0xc0, 0x3c, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
        
    
    # buffer = bytearray(b'\xff\xff\xff\xfc\xff\xff\xff\xfc\xff\xff\xff\xfc\xff\xff\xff\xfc\xff\xff\xff\xfc\xff\xff\xff\xfc\xff\xff\xff\xfc\xfe\x7f\x9c\xfc\xf0\x07\x00|\xf3\xe7\x08|\xf7\xe7\x00<\xf0\x07\x80|\xf7\xe7\x00|\xf0\x07\xc1\xfc\xf0\x07\x0f\xfc\xff\xff\xff\xfc\xf0\x07\x00<\xf3\xc7\x18|\xf3\xe79\xfc\xf0\x06\x10\xfc\xf3\xc7 <\xf3\xe7\t\xfc\xf0\x06\x19\xfc\xf3\xef\xfd\xfc\xff\xff\xff\xfc\xff\xff\xff\xfc\xff\xff\xff\xfc\xff\xff\xff\xfc\xff\xff\xff\xfc\xff\xff\xff\xfc')
    
    
    fb = framebuf.FrameBuffer(buffer, 64,64,framebuf.MONO_VLSB)
    
    oled.fill(0)
    oled.blit(fb, 0, 0)
    oled.show()

    # oled.fill(0)
    oled.blit(fb, 64, 0)
    oled.show()

def display_text(oled):
    # Display text on the OLED
    # oled.text("Raspberry Pi", 5, 5)
    # oled.text("Pico", 5, 15)
    # oled.show()
    pass

def display_anima(oled):
    # Display a simple timer animation on the OLED
    start_time = utime.ticks_ms()

    while True:
        elapsed_time = (utime.ticks_diff(utime.ticks_ms(), start_time) // 1000) + 1
        
        # Clear the specific line by drawing a filled black rectangle
        oled.fill_rect(5, 40, oled.width - 5, 8, 0)

        # oled.text("Timer:", 5, 30)
        # oled.text(str(elapsed_time) + " sec", 5, 40)
        # oled.show()
        # utime.sleep_ms(1000)

def main():
    i2c_dev = init_i2c(scl_pin=27, sda_pin=26)
    oled = SSD1306_I2C(pix_res_x, pix_res_y, i2c_dev)
    display_logo(oled)
    display_text(oled)
    display_anima(oled)

if __name__ == '__main__':
    main()
